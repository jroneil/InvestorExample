{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from './environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClientService = /*#__PURE__*/(() => {\n  class ClientService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.apiServer = environment.clientApiUrl;\n    }\n\n    create(Client) {\n      return this.httpClient.post(this.apiServer + '/save', JSON.stringify(Client), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n\n    update(Client) {\n      return this.httpClient.put(this.apiServer + '/update', JSON.stringify(Client), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n\n    getById(id) {\n      return this.httpClient.get(this.apiServer + '/' + id).pipe(catchError(this.errorHandler));\n    }\n\n    getAll() {\n      return this.httpClient.get(this.apiServer + '/all').pipe(catchError(this.errorHandler));\n    }\n\n    delete(id) {\n      console.log('in delete');\n      return this.httpClient.delete(this.apiServer + '/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n\n    errorHandler(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ClientService.ɵfac = function ClientService_Factory(t) {\n    return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientService,\n    factory: ClientService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClientService;\n})();","map":null,"metadata":{},"sourceType":"module"}